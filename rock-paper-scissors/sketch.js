//--------------------------r-----------------------------------------------
// Add your link here! (To your model Keep the quotes and semicolon. Add the model within the quotation marks. Ex)
//let imageModelURL = "https://teachablemachine.withgoogle.com/models/FZvVVZ5gH/";
let imageModelURL = "https://teachablemachine.withgoogle.com/models/vBhBXqIjI/";
//-------------------------------------------------------------------------


/*Description:


We created a game of Rock Paper Scissors! Thanks to the model we created, we can use our hands to register our moves. Click on the preview to lock in your selection and see the results!


If you face any difficulties, you can also use the following keys to play:
R - Rock
P - Paper
S - Scissors


Refresh to play again!
*/





   //Code generated by Teachable Machine:
let cnv;
//------------
//My code:
//Possible moves
// rock, paper, scissors, none
let playerMove = "none";
let computerMove = "none";
let playerScore = 0;
let computerScore = 0;
//------------
// possible states: playing, paused, over
let state = "playing";
let message = "Click to lock in selection";
//Code generated by Teachable Machine:
// Classifier Variable
let classifier;
// Model URL




// Video
let video;
let flippedVideo;
// To store the classification
let label = "";
//--------------------------------
// Load the model first (Code generated by Teachable Machine)
function preload() {
   classifier = ml5.imageClassifier(imageModelURL + 'model.json');
}


// Get a prediction for the current video frame
function classifyVideo() {
   flippedVideo = ml5.flipImage(video)
   classifier.classify(flippedVideo, gotResult);
   flippedVideo.remove();
}

//----------------------------------


//My code:


//Center the canvas in the middle of the window.
function centerCanvas() {
   var x = (windowWidth - width) / 2;
   var y = (windowHeight - height) / 2;
   cnv.position(x, y);
}


function setup() {
       //Code generated by Teachable Machine


   cnv = createCanvas(640, 240);
   // Create the video
   video = createCapture(VIDEO);
   video.size(320, 240);
   video.hide();


   flippedVideo = ml5.flipImage(video);


   // Start classifying
   classifyVideo();
   //----------------
   //My code:


   //Centers the canvas
   centerCanvas();
   //imageMode = (CENTER);
}
//Gets the emoji displayed when playermove is classified.
   //My code:
function getMoveEmoji(move) {
   if (move == "rock") {
       return "🪨";
   } else if (move == "paper") {
       return "📝";
   } else if (move == "scissors") {
       return "✂️";
   } else if (move == "none") {
       return "NONE";
   } else {
       return "invalid move";
   }
}
   //My code:
//The game over screen
function gameOver(r, g, b, victoryStatus) {
   clear();
   background(r, g, b);
   fill(255);
   textSize(60);
   text((`Game Over. You ${victoryStatus}`), width / 2, height / 2);


   fill(0, 0, 0,)
   rect(125, 350, 250, 50);
   fill(255, 255, 255);
   textSize(35);
   text('Return to Menu', 125, 385);
}
//The draw function (Loop that iterates approximately 30-60 times a second)
function draw() {
   //Code generated by Teachable Machine:
   background(222);
   // Draw the video
   image(flippedVideo, 0, 0);


     //My code:


   // only update move if currently playing
   if (state == "playing") {
       // updates player move based on key press
  
       if (keyIsDown(82) || label == 'rock') {
           // R key pressed
           playerMove = "rock";
       } else if (keyIsDown(80) || label == 'paper') {
           // P key pressed
           playerMove = "paper";
       } else if (keyIsDown(83) || label == 'scissors') {
           // S key pressed
           playerMove = "scissors";
       }
       else if (label == 'none') {
           playerMove = 'none';
       }
       // red dividing line between two sides
       strokeWeight(10);
       line(width / 2, 0, width / 2, height);


       // display emojis for player and computer moves
       strokeWeight(1);
       textSize(100);
       textAlign(CENTER, CENTER);
       // display emoji for player's move
       text(getMoveEmoji(playerMove), 0, 0, width / 2, height);
       // display emoji for computer's move
       text(getMoveEmoji(computerMove), width / 2, 0, width / 2, height);


       // display message to tell user next step
       textSize(12);
       stroke(0);
       strokeWeight(2);
       fill(255);
       text(message, 0, 200, width / 2, 40);


       // display scores
       textSize(35);
       text(playerScore, 20, 20);
       text(computerScore, width - 20, 20);
       if ((playerScore >= 3) || (computerScore >= 3)) {
           state = 'over';
           text("Game over", 0, 0);
       }
   }
   else if (state == 'paused') {


       // red dividing line between two sides
       strokeWeight(10);
       line(width / 2, 0, width / 2, height);


       // display emojis for player and computer moves
       strokeWeight(1);
       textSize(100);
       textAlign(CENTER, CENTER);
       // display emoji for player's move
       text(getMoveEmoji(playerMove), 0, 0, width / 2, height);
       // display emoji for computer's move
       text(getMoveEmoji(computerMove), width / 2, 0, width / 2, height);


       // display message to tell user next step
       textSize(12);
       stroke(0);
       strokeWeight(2);
       fill(255);
       text(message, 0, 200, width / 2, 40);


       // display scores
       textSize(35);
       text(playerScore, 20, 20);
       text(computerScore, width - 20, 20);
   }


   else if (state == 'over') {


       if (playerScore > computerScore) {
           gameOver(0, 255, 0, "Win!");
       }
       else {
           gameOver(255, 0, 0, "Lose!");
       }




   }






}
function mouseClicked() {
   //My code


   // if mouse is clicked while in the playing state,
   // and a move is selected,
   // lock in player choice and determine winner
   if (state == "playing" && playerMove) {
       console.log(playerMove);
       // selects a random move for the computer
       let moves = ["rock", "paper", "scissors"];
       computerMove = random(moves);


       // Determine winner and perform action
       if (
           (playerMove == "rock" && computerMove == "scissors") ||
           (playerMove == "paper" && computerMove == "rock") ||
           (playerMove == "scissors" && computerMove == "paper")
       ) {
           // Case 1: Player beats computer
           playerScore++;
       } else if (
           (computerMove == "rock" && playerMove == "scissors") ||
           (computerMove == "paper" && playerMove == "rock") ||
           (computerMove == "scissors" && playerMove == "paper")
       ) {
           // Case 2: Computer beats player
           computerScore++;
       }
       // in the case of a tie, nothing happens to score


       // Pauses the game to give time to view the results
       state = "paused";
       message = "Click to resume";
   }
   // if game is currently paused, resume it
   else if (state == "paused") {
       state = "playing";
       computerMove = "none";
       message = "Click to lock in selection";
   }
 }
//Code generated by Teachable Machines:
function gotResult(error, results) {
   // If there is an error
   if (error) {
       console.error(error);
       return;
   }
   // The results are in an array ordered by confidence.
   // console.log(results[0]);
   label = results[0].label;
   // Classifiy again!
   classifyVideo();
}
//My code:
function windowResized() {
   centerCanvas();
}
